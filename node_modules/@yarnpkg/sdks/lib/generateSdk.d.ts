import { Report, Configuration } from '@yarnpkg/core';
import { Filename, PortablePath } from '@yarnpkg/fslib';
import { PnpApi } from '@yarnpkg/pnp';
export declare const SDK_FOLDER: PortablePath;
export declare const INTEGRATIONS_FILE: Filename;
export declare const SUPPORTED_INTEGRATIONS: Map<"vscode" | "vim", IntegrationSdks>;
export declare const getDisplayName: (name: string) => string;
export declare const validateIntegrations: (integrations: Set<string>) => void;
export type MapKey<S> = S extends Map<infer K, any> ? K : never;
export type SupportedIntegration = MapKey<typeof SUPPORTED_INTEGRATIONS>;
export declare class IntegrationsFile {
    integrations: Set<SupportedIntegration>;
    raw: {
        [key: string]: any;
    };
    static find(projectRoot: PortablePath): Promise<IntegrationsFile | null>;
    loadFile(path: PortablePath): Promise<void>;
    load(data: any): void;
    exportTo(data: {
        [key: string]: any;
    }): {
        [key: string]: any;
    };
    persist(dir: PortablePath): Promise<void>;
}
type TemplateOptions = {
    setupEnv?: boolean;
    usePnpify?: boolean;
    wrapModule?: string;
};
export type GenerateBaseWrapper = (pnpApi: PnpApi, target: PortablePath) => Promise<Wrapper>;
export type GenerateIntegrationWrapper = (pnpApi: PnpApi, target: PortablePath, wrapper: Wrapper) => Promise<void>;
export type GenerateDefaultWrapper = (pnpApi: PnpApi, target: PortablePath) => Promise<void>;
export type SupportedSdk = '@astrojs/language-server' | 'eslint' | 'prettier' | 'relay-compiler' | 'typescript-language-server' | 'typescript' | 'svelte-language-server' | 'flow-bin';
export type BaseSdks = Array<[
    SupportedSdk,
    GenerateBaseWrapper
]>;
export type IntegrationSdks = Array<[null, GenerateDefaultWrapper | null] | [SupportedSdk, GenerateIntegrationWrapper | null]>;
export type PackageExports = {
    [key: string]: PackageExports;
} | Array<PackageExports> | string | null;
export declare class Wrapper {
    private name;
    private pnpApi;
    private target;
    private paths;
    readonly manifest: Record<string, any>;
    constructor(name: PortablePath, { pnpApi, target, manifestOverrides }: {
        pnpApi: PnpApi;
        target: PortablePath;
        manifestOverrides?: Record<string, any>;
    });
    private loadManifest;
    writeDefaults(): Promise<void>;
    writePackageBinaries(): Promise<void>;
    writePackageExports(packageExports?: PackageExports, requirePath?: PortablePath): Promise<void>;
    writeManifest(): Promise<void>;
    writeBinary(relPackagePath: PortablePath, options?: TemplateOptions & {
        requirePath?: PortablePath;
    }): Promise<void>;
    writeFile(relPackagePath: PortablePath, options?: TemplateOptions & {
        requirePath?: PortablePath;
        mode?: number;
    }): Promise<PortablePath>;
    getProjectPathTo(relPackagePath: PortablePath): PortablePath;
}
type AllIntegrations = {
    requestedIntegrations: Set<SupportedIntegration>;
    preexistingIntegrations: Set<SupportedIntegration>;
};
export declare const generateSdk: (pnpApi: PnpApi, { requestedIntegrations, preexistingIntegrations }: AllIntegrations, { report, onlyBase, verbose, configuration }: {
    report: Report;
    onlyBase: boolean;
    verbose: boolean;
    configuration: Configuration;
}) => Promise<void>;
export {};
